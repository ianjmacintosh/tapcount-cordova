{"version":3,"sources":["components/Panel.js","components/Counter.js","utilities/utilities.js","components/Timer.js","components/Statistics.js","components/Controls.js","components/App.js","reportWebVitals.js","index.js"],"names":["Panel","handlePanelBackgroundClick","e","stopPropagation","props","resetTime","resetCount","closePanel","handlePanelContentClick","this","isOpen","className","data-testid","onMouseDown","children","React","Component","Counter","isTimerActive","didTimerStart","id","settingMax","count","getTimeObject","millisecondsElapsed","remainderTime","hours","Math","floor","minutes","seconds","milliseconds","round","Timer","state","updateTimeState","newTimeObject","setState","elapsedTime","prevProps","data-elapsedtime","Statistics","lastMeasurementTime","Date","now","average","scope","timeObject","Controls","handleResetCounterClick","handleResetTimerClick","handleResetButtonClick","pauseTimer","openPanel","handleMaxClick","enterMaxMode","handlePauseButtonClick","startTimer","App","startTime","settingMaxCount","settingMaxTime","isPanelOpen","handleClick","target","localName","exitMaxMode","setCount","newCount","runningTimer","setInterval","newElapsedTime","clearInterval","setTime","newTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2e94602.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Panel.css\";\n\nclass Panel extends React.Component {\n    handlePanelBackgroundClick = (e) => {\n        e.stopPropagation();\n\n        this.props.resetTime();\n        this.props.resetCount();\n        this.props.closePanel();\n    }\n\n    handlePanelContentClick = (e) => {\n        e.stopPropagation();\n    }\n\n    render() {\n        if (this.props.isOpen) {\n            return (\n                <div className=\"panel\" data-testid=\"panel-component\">\n                    <div className=\"panel-backdrop\" data-testid=\"panel-backdrop\" onMouseDown={this.handlePanelBackgroundClick} />\n                    <div className=\"panel-content\" onMouseDown={this.handlePanelContentClick}>\n                        {this.props.children}\n                    </div>\n                </div>);\n    } else {\n        return null;\n    }\n}\n}\n\nexport default Panel;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Counter.css\"\n\nclass Counter extends React.Component {\n    static propTypes = {\n        count: PropTypes.number,\n        setCount: PropTypes.func.isRequired,\n        settingMax: PropTypes.bool,\n        isTimerActive: PropTypes.bool,\n        didTimerStart: PropTypes.bool,\n    }\n\n    render() {\n        return (<div className={\"counter \" + (!this.props.isTimerActive && this.props.didTimerStart ? \"paused\" : \"\")} data-testid=\"counter-component\">\n            <span id=\"count\" data-testid=\"count\" className={this.props.settingMax ? \"editable\" : \"\"}>{this.props.count}</span>\n        </div>);\n    }\n}\n\nexport default Counter;","export function getTimeObject(millisecondsElapsed) {\n    let remainderTime = millisecondsElapsed;\n\n    let hours = Math.floor(remainderTime / (60 * (60 * 1000)));\n    remainderTime -= hours * 60 * 60 * 1000;\n\n    let minutes = Math.floor(remainderTime / (60 * 1000));\n    remainderTime -= minutes * 60 * 1000;\n\n    let seconds = Math.floor(remainderTime / 1000);\n    remainderTime -= seconds * 1000;\n\n    let milliseconds = Math.round(remainderTime / 100);\n\n    return {\n        hours,\n        minutes,\n        seconds,\n        milliseconds\n    }\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getTimeObject } from \"../utilities/utilities\";\n\nimport \"./Timer.css\"\n\nclass Timer extends React.Component {\n    componentDidMount() {\n        this.updateTimeState(this.props.elapsedTime);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.elapsedTime !== this.props.elapsedTime) {\n            this.updateTimeState(this.props.elapsedTime)\n        }\n    }\n\n    static propTypes = {\n        elapsedTime: PropTypes.number,\n        settingMax: PropTypes.bool,\n        isTimerActive: PropTypes.bool,\n        didTimerStart: PropTypes.bool,\n    }\n\n    state = {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0\n    }\n\n    updateTimeState = (millisecondsElapsed) => {\n        const newTimeObject = getTimeObject(millisecondsElapsed);\n\n        this.setState(newTimeObject);\n    }\n\n    render() {\n        return (<div className={\"timer \" + (!this.props.isTimerActive && this.props.didTimerStart ? \"paused\" : \"\")} data-testid=\"timer-component\">\n            <time id=\"time\" data-testid=\"time\" data-elapsedtime={this.props.elapsedTime} className={this.props.settingMax ? \"editable\" : \"\"}>\n                <span data-testid=\"hours\">{this.state.hours < 10 ? \"0\" + this.state.hours : this.state.hours}</span>:\n                <span data-testid=\"minutes\">{this.state.minutes < 10 ? \"0\" + this.state.minutes : this.state.minutes}</span>:\n                <span data-testid=\"seconds\">{this.state.seconds < 10 ? \"0\" + this.state.seconds : this.state.seconds}</span>.\n                <span data-testid=\"milliseconds\">{this.state.milliseconds === 10 ? \"0\" : this.state.milliseconds}</span>\n            </time>\n        </div>);\n    }\n}\n\nexport default Timer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport './Statistics.css';\n\nclass Statistics extends React.Component {\n    static propTypes = {\n        count: PropTypes.number,\n        elapsedTime: PropTypes.number,\n    }\n\n    lastMeasurementTime = Date.now();\n\n    average() {\n        let count = this.props.count,\n            elapsedTime = this.props.elapsedTime,\n            average = 0;\n\n        if (elapsedTime !== 0) {\n            average = Math.round((count / elapsedTime * 1000 * 60 * 1000) / 1000);\n        }\n\n        return average;\n    }\n\n    render() {\n        return (<span data-testid=\"statistics-component\">\n            <table>\n                    <caption>Session Statistics</caption>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">Avg. Speed</th>\n                            <td data-testid=\"speed\">{this.average()}/min</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Count</th>\n                            <td data-testid=\"count\">{this.props.count}</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Duration</th>\n                            <td data-testid=\"time\">\n                            <time data-testid=\"stats-report-time\">\n                                <span data-testid=\"hours\">{this.props.timeObject.hours < 10 ? \"0\" + this.props.timeObject.hours : this.props.timeObject.hours}</span>:\n                                <span data-testid=\"minutes\">{this.props.timeObject.minutes < 10 ? \"0\" + this.props.timeObject.minutes : this.props.timeObject.minutes}</span>:\n                                <span data-testid=\"seconds\">{this.props.timeObject.seconds < 10 ? \"0\" + this.props.timeObject.seconds : this.props.timeObject.seconds}</span>.\n                                <span data-testid=\"milliseconds\">{this.props.timeObject.milliseconds === 10 ? \"0\" : this.props.timeObject.milliseconds}</span>\n                            </time>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n        </span>);\n    }\n}\n\nexport default Statistics;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Controls.css\";\n\nclass Controls extends React.Component {\n    static propTypes = {\n        resetCount: PropTypes.func.isRequired,\n        resetTime: PropTypes.func.isRequired,\n        pauseTimer: PropTypes.func.isRequired,\n        startTimer: PropTypes.func.isRequired,\n        isTimerActive: PropTypes.bool,\n        enterMaxMode: PropTypes.func\n    }\n    handleResetCounterClick = (e) => {\n        this.props.resetCount();\n    }\n\n    handleResetTimerClick = (e) => {\n        this.props.resetTime();\n    }\n\n    handleResetButtonClick = (e) => {\n        this.props.pauseTimer();\n        this.props.openPanel();\n    }\n\n    handleMaxClick = (e) => {\n        this.props.enterMaxMode();\n    }\n\n    handlePauseButtonClick = (e) => {\n        if (this.props.isTimerActive) {\n            this.props.pauseTimer();\n        } else {\n            this.props.startTimer();\n        }\n    }\n\n    render() {\n        return (<div data-testid=\"controls-component\" className=\"controls\">\n            <ul>\n                <li>\n                    <button className=\"pause-button\" onMouseDown={this.handlePauseButtonClick} data-testid=\"pause-button\">Start/Stop</button>\n                </li>\n                <li>\n                    <button className=\"reset-button\" onMouseDown={this.handleResetButtonClick} data-testid=\"reset-button\">Reset</button>\n                </li>\n            </ul>\n        </div>)\n    }\n}\n\nexport default Controls;","import React from \"react\";\nimport '../App.css';\n\nimport Panel from \"./Panel\";\nimport Counter from \"./Counter\";\nimport Timer from \"./Timer\";\nimport Statistics from \"./Statistics\";\nimport Controls from \"./Controls\";\n\nimport { getTimeObject } from \"../utilities/utilities\";\n\nclass App extends React.Component {\n  state = {\n    count: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    isTimerActive: false,\n    settingMaxCount: false,\n    settingMaxTime: false,\n    isPanelOpen: false,\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.runningTimer);\n  }\n\n  handleClick = (e) => {\n    // Bail if clicking on a button\n    if (e.target.localName === \"button\") {\n        return;\n    }\n\n    // Bail if the user is trying to set a max\n    if (this.state.settingMaxCount || this.state.settingMaxTime) {\n      this.exitMaxMode();\n      return;\n    }\n    // Increment count\n    this.setCount(this.state.count + 1);\n\n    // Start timer if it's at 0\n    if (this.state.elapsedTime === 0) {\n      this.resetTime();\n      this.startTimer();\n    }\n    // If the timer is not active, resume it\n    else if (!this.state.isTimerActive) {\n      this.startTimer();\n    }\n  }\n\n  enterMaxMode = () => {\n    this.setState({\n      settingMaxCount: true,\n      settingMaxTime: true\n    })\n  }\n\n  exitMaxMode = () => {\n    this.setState({\n      settingMaxCount: false,\n      settingMaxTime: false\n    })\n  }\n\n  setCount = (newCount) => {\n    this.setState({ count: newCount })\n  }\n\n  resetCount = () => {\n    this.setCount(0);\n  }\n\n  startTimer = () => {\n    this.runningTimer = setInterval(() => {\n      let newElapsedTime = Date.now() - this.state.startTime;\n\n      this.setState({\n        elapsedTime: newElapsedTime\n      })\n    }, 100);\n\n    this.setState({\n      isTimerActive: true,\n      startTime: Date.now() - this.state.elapsedTime\n    })\n  }\n\n  pauseTimer = () => {\n    clearInterval(this.runningTimer);\n    this.setState({ isTimerActive: false })\n  }\n\n  setTime = (newTime) => {\n    this.setState({ elapsedTime: newTime });\n  }\n\n  resetTime = () => {\n    this.setState({\n      startTime: Date.now(),\n      elapsedTime: 0,\n      isTimerActive: false\n    })\n    clearInterval(this.runningTimer);\n  }\n\n  openPanel = () => {\n    this.setState({\n      isPanelOpen: true\n    })\n  }\n\n  closePanel = () => {\n    this.setState({\n        isPanelOpen: false\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className={\"App \" +\n          (!this.state.isTimerActive ? \"paused \": \"\") +\n          (this.state.elapsedTime !== 0 ? \"started \" : \"\") +\n          (this.state.isPanelOpen ? \"panel-open \" : \"\")\n        }\n        data-testid=\"app-component\"\n        onMouseDown={this.handleClick}>\n        <Panel\n          isOpen={this.state.isPanelOpen}\n          closePanel={this.closePanel}\n          resetCount={this.resetCount}\n          resetTime={this.resetTime}>\n          <Statistics\n            count={this.state.count}\n            elapsedTime={this.state.elapsedTime}\n            timeObject={getTimeObject(this.state.elapsedTime)}/>\n        </Panel>\n        <div className=\"main-area\">\n          <Counter\n            count={this.state.count}\n            setCount={this.setCount}\n            settingMax={this.state.settingMaxCount}\n            isTimerActive={this.state.isTimerActive}\n            didTimerStart={this.state.elapsedTime !== 0}/>\n          <Timer\n            elapsedTime={this.state.elapsedTime}\n            settingMax={this.state.settingMaxTime}\n            isTimerActive={this.state.isTimerActive}\n            didTimerStart={this.state.elapsedTime !== 0} />\n          <Controls\n            openPanel={this.openPanel}\n            resetCount={this.resetCount}\n            resetTime={this.resetTime}\n            pauseTimer={this.pauseTimer}\n            startTimer={this.startTimer}\n            enterMaxMode={this.enterMaxMode}\n            isTimerActive={this.state.isTimerActive}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}